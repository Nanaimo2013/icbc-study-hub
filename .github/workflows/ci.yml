name: CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]
        
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run build
        run: npm run build --if-present
        
      - name: Run tests
        run: npm test --if-present
      
      - name: Cache build output
        uses: actions/cache@v3
        with:
          path: |
            build
            node_modules
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
      
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --max-warnings=0
        continue-on-error: true
      
      - name: Run Prettier check
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,css,scss,json}"
        continue-on-error: true
  
  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Check file formatting
        uses: creyD/prettier_action@v4.3
        with:
          prettier_options: --check src/**/*.{js,jsx,ts,tsx,css,scss,json}
          dry: true
        continue-on-error: true

  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest
    needs: [build-and-test, lint]
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      - name: Build application
        run: npm run build
      
      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request.head.ref,
              environment: 'preview',
              auto_merge: false,
              required_contexts: [],
              description: 'PR Preview Deployment'
            });
            return deployment.data.id;
      
      # Note: In a real scenario, you would push to a preview hosting provider here
      # For example, Vercel, Netlify, GitHub Pages, etc.
      
      - name: Update deployment status
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              description: 'Preview deployment successful',
              environment_url: 'https://preview.example.com/${{ github.event.pull_request.number }}',
              environment: 'preview'
            });
          
      - name: Add preview URL comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: 'ðŸš€ Preview deployment successful!\n\n[Preview URL](https://preview.example.com/${{ github.event.pull_request.number }})'
            }); 